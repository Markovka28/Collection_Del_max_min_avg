# СОЗДАНИЕ ФУНКЦИИ КОТОРАЯ БУДЕТ СУММИРОВАТЬ ВСЕ ЧИСЛА ОТ 1го ДО N
""" 
def sum_num(n, y = 'Hello'):    # количество аргументов нужно передавать сразу и полностью
    print(y)
    summa = 0                   # объявляем переменную которая начинается с 0
    for i in range(1, n+1):     # проходим в заданном диапазоне
        summa +=i               # при каждой итерации увеличиваем сумму на i
    # print (summa)             # в этой же функции печатаем переменную
    return summa                # в это случае при вызове функции будет возвращаться return который завершает работу функции
    print('stop')               # этот принт не выведется т.к. return завершает работу функции

a = sum_num(5, 'текст')         # просто так добавить сюда 2й аргумент нельзя его нужно ОБЯЗАТЕЛЬНО ОБОЗНАЧИТЬ ПРИ ВЫЗОВЕ ФУНКЦИИ def
print(a)
#print (sum_num(5))             # чтобы вызвать функцию нужно указать ее имя и в параметрах указать числа

 """

# ФУНКЦИЯ ПРИНИМАЮЩАЯ НЕОГРАНИЧЕННОЕ КОЛИЧЕСТВО АРГУМЕНТОВ
""" 
def sum_str(*args):             # чтобы передать неограниченное количество аргументов ставим *
    res = ' '                   # переменная которая имеется в строках 
    for i in args:              # проходим по всем элементам переменной args
        res += i                # при каждой итерации к переменной res добавляем переменную i
    return res                  # возвращаем переменную
print(sum_str('q', 'e', 'l'))   # передаем аргументы
print(sum_str('q', 'e', 'l', 'f', 'g'))
# print(sum_str(1, 5, 7)) приведет к ошибке
 """
""" 
# МОДУЛЬ
def max1(a, b): # функция будет определять максимальное число
    if a > b:
        return a
    return b
 """
""" 
                # РУКУРСИЯ
# вводится число n, вывести n первых членов последовательности Фибаначи
def fib(n):                             # фунция принимающуя значение n
    if n in [1,2]:                      # условия выхода: если n находится в списке 1,2 то вернем единицу
        return 1    
    return fib(n-1) + fib(n-2)          # в противном случае будем воззвращать рекурсию ПОСЛЕДОВАТЕЛЬНОСТЬ ФИБОНАЧИ СОЗДАЕТСЯ ПУТЕМ СУММИРОВАНИЯ 2Х ЧЛЕНОВ СООТВЕТСВЕННО ЧТОБЫ ПОЛУЧИТЬ НОВЫЙ ЧЛЕН НУЖНО ВЫЧЕСТЬ ДВА ЧЛЕНА
list_1 = []                             # список в который будем записывать наши числа
for i in range(1, 10):
    list_1.append(fib(i))               # при каждой итерации цикла будем добавлять вызов функции fib
print(list_1)
 """
"""  
n = int(input('количество элементов Фибоначи: '))
n1 = 0
n2 = 1
for i in range(1, n+1):
    n1,n2 = n2,n1 + n2 # для n1 присваиваем n2,  для n2 присваивааем n1+n2
    print(n1, end= ' ')
 """
""" 
def fib(n):
     if n in [1,2]:
         return 1
     return fib(n-1) + fib(n-2)

n = int(input('введите число: '))
print(fib(n+1))
 """


