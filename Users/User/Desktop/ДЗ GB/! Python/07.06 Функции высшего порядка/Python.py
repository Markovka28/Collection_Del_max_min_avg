""" 
def f(x):
    return x*x
a=f                 # переменная которая хранит в себе ссылку на функцию f
print(type(f)) # посмотреть тип данных
print(a(5))
 """

# def calk1(a, b):
#     return a + b

# def calk2(a, b):
#     return a*b

# def math(op, x, y):
#     print(op(x))
    
# math(calk1, 5, 45)                # передаем в функцию math функцию calk1, поэтому op имеет ссылку на calk 1


#СОЗДАЕМ ЛЯМБДА ФУНКЦИЮ

# calk1 = lambda a,b: a+b    

# math(lambda a,b: a+b, 5, 45) # запись функции короче

# ЗАДАЧА: В СПИСКЕ ХРАНЯТСЯ ЧИСЛА, НУЖНО ВЫБРАТЬ ТОЛЬКО ЧЕТНЫЕ И СОСТАВИТЬ СПИСКО ПАР (ЧИСЛО+ЕГО КВАДРАТ)

# list()
# list = [i**i for i in range (1,101) if i % 2==0]


# a = [2,3,4,5,6,7]

# b = list(map(lambda x: x**2, a))
# print(b)


# Задача №47. Решение в группах
# У вас есть код, который вы не можете менять (так часто бывает, когда код в глубине программы используется множество раз и вы 
# не хотите ничего сломать):
# transformation = <???>
# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] # или любой другой список
# transormed_values = list(map(transformation, values))
# Единственный способ вашего взаимодействия с этим кодом - посредством задания функции transformation.
# Однако вы поняли, что для вашей текущей задачи вам не нужно никак преобразовывать
# список значений, а нужно получить его как есть.
# Напишите такое лямбда-выражение transformation, чтобы transformed_values получился копией values.

# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
# transformation = (lambda x: values)
# transormed_values = list(map(transformation, values))
# print(values)

# Планеты вращаются вокруг звезд по эллиптическим орбитам.
# Назовем самой далекой планетой ту, орбита которой имеет
# самую большую площадь. Напишите функцию
# find_farthest_orbit(list_of_orbits), которая среди списка орбит
# планет найдет ту, по которой вращается самая далекая
# планета. Круговые орбиты не учитывайте: вы знаете, что у
# вашей звезды таких планет нет, зато искусственные спутники
# были были запущены на круговые орбиты. Результатом
# функции должен быть кортеж, содержащий длины полуосей
# эллипса орбиты самой далекой планеты. Каждая орбита
# представляет из себя кортеж из пары чисел - полуосей ее
# эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b,
# где a и b - длины полуосей эллипса. При решении задачи
# используйте списочные выражения. Подсказка: проще всего
# будет найти эллипс в два шага: сначала вычислить самую
# большую площадь эллипса, а затем найти и сам эллипс,
# имеющий такую площ

# orbits = [(20, 50), (15.7, 102), (80, 30), (70, 50), (60, 25.6)]
# def find_farthest_orbit(orbits):
#     return max(orbits, key = lambda x: x[0]*x[1] if x[0] != x[1] else -1)
# print(find_farthest_orbit(orbits))


# Напишите функцию same_by(characteristic, objects), которая проверяет, все ли объекты имеют одинаковое значение
# некоторой характеристики, и возвращают True, если это так.
# Если значение характеристики для разных объектов отличается - то False. Для пустого набора объектов, функция
# должна возвращать True. 
# Аргумент characteristic - это функция, которая принимает объект и вычисляет его характеристику.

# objects = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
# def same_by(characteristic, objects):
#     res = list(filter(lambda x: x % 2 == 0, same_by))
#     print(res)

# def same_by(characteristic, objects):
#     new = list(filter(characteristic,objects))
#     print(new)

#     if new == objects:
#         return True
#     return False

# def car(x):
#     return x%2 == 0
# values = [2, 3, 8, 7, 11, 13, 24, 19, 23, 29]
# print(same_by(car, values))


# Учитывая массив целых чисел nums и целое число target, верните индексы двух чисел таким образом, чтобы они в сумме равнялись target.
# Вы можете предположить, что каждый ввод будет иметь ровно одно решение, и вы не можете использовать один и тот же элемент дважды.
# Вы можете вернуть ответ в любом порядке.

# nums = [int(x) for x in input().split()]
# target = int(input())

# for i in range(len(nums)):
#     for j in range(i + 1, len(nums)):
#         if nums[i]+nums[j] == target:
#             print(i, j)
            
        
# def two_sum(seq, target):
#     mem = {}
#     for i in range(len(seq)):
#         if target-seq[i] in mem:
#             return (i, mem[target-seq[i]])
#         else:
#             mem[seq[i]] = i
#     return None            